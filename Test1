ESP32 RTOS

rst:0x1 (POWERON_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT)
configsip: 0, SPIWP:0xee
clk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x00
mode:DIO, clock div:2
load:0x3fff0030,len:9592
load:0x40078000,len:18672
load:0x40080400,len:4636
entry 0x4008071c
I (27) boot: ESP-IDF v5.0.2 2nd stage bootloader
I (27) boot: compile time 09:31:41
D (27) bootloader_flash: non-XMC chip detected by SFDP Read (FF), skip.
D (33) bootloader_flash: mmu set block paddr=0x00000000 (was 0xffffffff)
I (40) boot: chip revision: v1.0
D (44) boot.esp32: magic e9
D (47) boot.esp32: segments 03
D (50) boot.esp32: spi_mode 02
D (53) boot.esp32: spi_speed 00
D (56) boot.esp32: spi_size 01
I (59) boot.esp32: SPI Speed      : 40MHz
I (64) boot.esp32: SPI Mode       : DIO
I (68) boot.esp32: SPI Flash Size : 2MB
D (73) boot: Enabling RTCWDT(9000 ms)
I (77) boot: Enabling RNG early entropy source...
D (82) bootloader_flash: rodata starts from paddr=0x0000a000, size=0xc00, will be mapped to vaddr=0x3f400000
D (92) boot: mapped partition table 0xa000 at 0x3f40a000
D (97) flash_parts: partition table verified, 4 entries
I (103) boot: Partition Table:
I (106) boot: ## Label            Usage          Type ST Offset   Length
D (114) boot: load partition table entry 0x3f40a000
D (119) boot: type=1 subtype=2
I (122) boot:  0 nvs              WiFi data        01 02 0000b000 00006000
D (129) boot: load partition table entry 0x3f40a020
D (134) boot: type=1 subtype=1
I (137) boot:  1 phy_init         RF data          01 01 00011000 00001000
D (145) boot: load partition table entry 0x3f40a040
D (150) boot: type=0 subtype=0
I (153) boot:  2 factory          factory app      00 00 00020000 00100000
I (161) boot: End of partition table
D (165) boot: Trying partition index -1 offs 0x20000 size 0x100000
D (171) esp_image: reading image header @ 0x20000
D (176) bootloader_flash: mmu set block paddr=0x00020000 (was 0xffffffff)
D (183) esp_image: image header: 0xe9 0x05 0x02 0x01 40081350
I (189) esp_image: segment 0: paddr=00020020 vaddr=3f400020 size=31808h (202760) map
D (197) esp_image: free data page_count 0x00000032
D (202) bootloader_flash: rodata starts from paddr=0x00020020, size=0x31808, will be mapped to vaddr=0x3f400000
D (274) bootloader_flash: mmu set block paddr=0x00050000 (was 0xffffffff)
I (274) esp_image: segment 1: paddr=00051830 vaddr=3ffb0000 size=0334ch ( 13132) load
D (278) esp_image: free data page_count 0x00000032
D (283) bootloader_flash: rodata starts from paddr=0x00051830, size=0x334c, will be mapped to vaddr=0x3f400000
D (297) bootloader_flash: mmu set block paddr=0x00050000 (was 0xffffffff)
I (300) esp_image: segment 2: paddr=00054b84 vaddr=40080000 size=0b494h ( 46228) load
D (308) esp_image: free data page_count 0x00000032
D (313) bootloader_flash: rodata starts from paddr=0x00054b84, size=0xb494, will be mapped to vaddr=0x3f400000
D (340) bootloader_flash: mmu set block paddr=0x00060000 (was 0xffffffff)
I (340) esp_image: segment 3: paddr=00060020 vaddr=400d0020 size=94d3ch (609596) map
D (344) esp_image: free data page_count 0x00000032
D (349) bootloader_flash: rodata starts from paddr=0x00060020, size=0x94d3c, will be mapped to vaddr=0x3f400000
D (545) bootloader_flash: mmu set block paddr=0x000f0000 (was 0xffffffff)
I (545) esp_image: segment 4: paddr=000f4d64 vaddr=4008b494 size=09764h ( 38756) load
D (549) esp_image: free data page_count 0x00000032
D (554) bootloader_flash: rodata starts from paddr=0x000f4d64, size=0x9764, will be mapped to vaddr=0x3f400000
D (578) bootloader_flash: mmu set block paddr=0x000f0000 (was 0xffffffff)
D (578) boot: Calculated hash: a3395a20731d48b1a48f06251b6740b8c0f4aa9ae8079d8bb7aeeab607e3ddcc
I (594) boot: Loaded app from partition at offset 0x20000
I (594) boot: Disabling RNG early entropy source...
D (596) boot: Mapping segment 0 as DROM
D (600) boot: Mapping segment 3 as IROM
D (604) boot: calling set_cache_and_start_app
D (608) boot: configure drom and irom and start
D (613) boot: start: 0x40081350
I (628) cpu_start: Pro cpu up.
I (628) cpu_start: Starting app cpu, entry point is 0x4008129c
I (0) cpu_start: App cpu up.
D (636) clk: RTC_SLOW_CLK calibration value: 3357146
I (649) cpu_start: Pro cpu start user code
I (649) cpu_start: cpu freq: 160000000 Hz
I (649) cpu_start: Application information:
I (654) cpu_start: Project name:     wifi_enterprise
I (659) cpu_start: App version:      1
I (664) cpu_start: Compile time:     Jun 25 2023 09:31:19
I (670) cpu_start: ELF file SHA256:  77694a946594c26a...
I (676) cpu_start: ESP-IDF:          v5.0.2
I (681) cpu_start: Min chip rev:     v0.0
I (686) cpu_start: Max chip rev:     v3.99 
I (690) cpu_start: Chip rev:         v1.0
D (695) memory_layout: Checking 7 reserved memory ranges:
D (701) memory_layout: Reserved memory range 0x3ffae000 - 0x3ffae6e0
D (707) memory_layout: Reserved memory range 0x3ffb0000 - 0x3ffb70e0
D (713) memory_layout: Reserved memory range 0x3ffe0000 - 0x3ffe0440
D (720) memory_layout: Reserved memory range 0x3ffe3f20 - 0x3ffe4350
D (726) memory_layout: Reserved memory range 0x40070000 - 0x40078000
D (733) memory_layout: Reserved memory range 0x40078000 - 0x40080000
D (739) memory_layout: Reserved memory range 0x40080000 - 0x40094bf8
D (746) memory_layout: Building list of available memory regions:
D (752) memory_layout: Available memory region 0x3ffae6e0 - 0x3ffb0000
D (758) memory_layout: Available memory region 0x3ffb70e0 - 0x3ffb8000
D (765) memory_layout: Available memory region 0x3ffb8000 - 0x3ffc0000
D (771) memory_layout: Available memory region 0x3ffc0000 - 0x3ffc2000
D (778) memory_layout: Available memory region 0x3ffc2000 - 0x3ffc4000
D (785) memory_layout: Available memory region 0x3ffc4000 - 0x3ffc6000
D (791) memory_layout: Available memory region 0x3ffc6000 - 0x3ffc8000
D (798) memory_layout: Available memory region 0x3ffc8000 - 0x3ffca000
D (804) memory_layout: Available memory region 0x3ffca000 - 0x3ffcc000
D (811) memory_layout: Available memory region 0x3ffcc000 - 0x3ffce000
D (818) memory_layout: Available memory region 0x3ffce000 - 0x3ffd0000
D (824) memory_layout: Available memory region 0x3ffd0000 - 0x3ffd2000
D (831) memory_layout: Available memory region 0x3ffd2000 - 0x3ffd4000
D (837) memory_layout: Available memory region 0x3ffd4000 - 0x3ffd6000
D (844) memory_layout: Available memory region 0x3ffd6000 - 0x3ffd8000
D (851) memory_layout: Available memory region 0x3ffd8000 - 0x3ffda000
D (857) memory_layout: Available memory region 0x3ffda000 - 0x3ffdc000
D (864) memory_layout: Available memory region 0x3ffdc000 - 0x3ffde000
D (870) memory_layout: Available memory region 0x3ffde000 - 0x3ffe0000
D (877) memory_layout: Available memory region 0x3ffe0440 - 0x3ffe3f20
D (884) memory_layout: Available memory region 0x3ffe4350 - 0x3ffe8000
D (890) memory_layout: Available memory region 0x3ffe8000 - 0x3fff0000
D (897) memory_layout: Available memory region 0x3fff0000 - 0x3fff8000
D (903) memory_layout: Available memory region 0x3fff8000 - 0x3fffc000
D (910) memory_layout: Available memory region 0x3fffc000 - 0x40000000
D (917) memory_layout: Available memory region 0x40094bf8 - 0x40096000
D (923) memory_layout: Available memory region 0x40096000 - 0x40098000
D (930) memory_layout: Available memory region 0x40098000 - 0x4009a000
D (936) memory_layout: Available memory region 0x4009a000 - 0x4009c000
D (943) memory_layout: Available memory region 0x4009c000 - 0x4009e000
D (950) memory_layout: Available memory region 0x4009e000 - 0x400a0000
I (956) heap_init: Initializing. RAM available for dynamic allocation:
D (964) heap_init: New heap initialised at 0x3ffae6e0
I (969) heap_init: At 3FFAE6E0 len 00001920 (6 KiB): DRAM
D (975) heap_init: New heap initialised at 0x3ffb70e0
I (980) heap_init: At 3FFB70E0 len 00028F20 (163 KiB): DRAM
I (986) heap_init: At 3FFE0440 len 00003AE0 (14 KiB): D/IRAM
I (992) heap_init: At 3FFE4350 len 0001BCB0 (111 KiB): D/IRAM
D (999) heap_init: New heap initialised at 0x40094bf8
I (1004) heap_init: At 40094BF8 len 0000B408 (45 KiB): IRAM
D (1011) intr_alloc: Connected src 46 to int 2 (cpu 0)
D (1016) spi_flash: trying chip: issi
D (1019) spi_flash: trying chip: gd
D (1023) spi_flash: trying chip: mxic
D (1026) spi_flash: trying chip: winbond
D (1030) spi_flash: trying chip: generic
I (1034) spi_flash: detected chip: generic
I (1039) spi_flash: flash io: dio
W (1043) spi_flash: Detected size(4096k) larger than the size in the binary image header(2048k). Using the size in the binary image header.
D (1056) cpu_start: calling init function: 0x40149b00
D (1062) cpu_start: calling init function: 0x4014961c
D (1067) cpu_start: calling init function: 0x400f1e14
D (1072) cpu_start: calling init function: 0x400d9e80
D (1077) cpu_start: calling init function: 0x400d43e4
D (1082) cpu_start: calling init function: 0x400d357c
D (1087) cpu_start: calling init function: 0x400d6fb0 on core: 0
D (1093) intr_alloc: Connected src 17 to int 3 (cpu 0)
D (1098) cpu_start: calling init function: 0x4015ea00 on core: 0
D (1105) intr_alloc: Connected src 24 to int 9 (cpu 0)
I (1110) cpu_start: Starting scheduler on PRO CPU.
D (0) intr_alloc: Connected src 25 to int 2 (cpu 1)
I (0) cpu_start: Starting scheduler on APP CPU.
D (1135) heap_init: New heap initialised at 0x3ffe0440
D (1135) heap_init: New heap initialised at 0x3ffe4350
D (1145) intr_alloc: Connected src 16 to int 12 (cpu 0)
D (1165) esp_netif_lwip: LwIP stack has been initialized
D (1165) esp_netif_lwip: esp-netif has been successfully initialized
D (1165) event: running task for loop 0x3ffbb9f8
D (1165) event: created task for loop 0x3ffbb9f8
D (1175) event: created event loop 0x3ffbb9f8
D (1175) esp_netif_objects: esp_netif_add_to_list 0x3ffbc924
D (1185) esp_netif_objects: esp_netif_add_to_list netif added successfully (total netifs: 1)
D (1195) esp_netif_lwip: check: remote, if=0x0 fn=0x400de0ac

D (1195) esp_netif_lwip: call api in lwip: ret=0x0, give sem
D (1205) nvs: nvs_open_from_partition misc 1
I (1215) wifi:wifi driver task: 3ffbe37c, prio:23, stack:3584, core=0
I (1215) system_api: Base MAC address is not set
I (1215) system_api: read default base MAC address from EFUSE
D (1225) efuse: In EFUSE_BLK0__DATA2_REG is used 8 bits starting with 8 bit
D (1235) efuse: In EFUSE_BLK0__DATA2_REG is used 8 bits starting with 0 bit
D (1235) efuse: In EFUSE_BLK0__DATA1_REG is used 8 bits starting with 24 bit
D (1245) efuse: In EFUSE_BLK0__DATA1_REG is used 8 bits starting with 16 bit
D (1255) efuse: In EFUSE_BLK0__DATA1_REG is used 8 bits starting with 8 bit
D (1265) efuse: In EFUSE_BLK0__DATA1_REG is used 8 bits starting with 0 bit
D (1265) efuse: In EFUSE_BLK0__DATA2_REG is used 8 bits starting with 16 bit
D (1275) nvs: nvs_open_from_partition nvs.net80211 1
D (1275) nvs: nvs_get opmode 1
D (1285) nvs: nvs_get_str_or_blob sta.ssid
D (1285) nvs: nvs_get sta.authmode 1
D (1295) nvs: nvs_get_str_or_blob sta.pswd
D (1295) nvs: nvs_get_str_or_blob sta.pmk
D (1295) nvs: nvs_get sta.chan 1
D (1305) nvs: nvs_get auto.conn 1
D (1305) nvs: nvs_get bssid.set 1
D (1305) nvs: nvs_get_str_or_blob sta.bssid
D (1315) nvs: nvs_get sta.lis_intval 2
D (1315) nvs: nvs_get sta.phym 1
D (1325) nvs: nvs_get sta.phybw 1
D (1325) nvs: nvs_get_str_or_blob sta.apsw
D (1325) nvs: nvs_get_str_or_blob sta.apinfo
D (1335) nvs: nvs_get sta.scan_method 1
D (1335) nvs: nvs_get sta.sort_method 1
D (1345) nvs: nvs_get sta.minrssi 1
D (1345) nvs: nvs_get sta.minauth 1
D (1345) nvs: nvs_get sta.pmf_e 1
D (1355) nvs: nvs_get sta.pmf_r 1
D (1355) nvs: nvs_get sta.btm_e 1
D (1355) nvs: nvs_get sta.rrm_e 1
D (1365) nvs: nvs_get sta.mbo_e 1
D (1365) nvs: nvs_get_str_or_blob ap.ssid
D (1365) nvs: nvs_get_str_or_blob ap.passwd
D (1375) nvs: nvs_get_str_or_blob ap.pmk
D (1375) nvs: nvs_get ap.chan 1
D (1375) nvs: nvs_get ap.authmode 1
D (1385) nvs: nvs_get ap.hidden 1
D (1385) nvs: nvs_get ap.max.conn 1
D (1395) nvs: nvs_get bcn.interval 2
D (1395) nvs: nvs_get ap.phym 1
D (1395) nvs: nvs_get ap.phybw 1
D (1405) nvs: nvs_get ap.sndchan 1
D (1405) nvs: nvs_get ap.pmf_e 1
D (1405) nvs: nvs_get ap.pmf_r 1
D (1415) nvs: nvs_get ap.p_cipher 1
D (1415) nvs: nvs_get lorate 1
D (1415) nvs: nvs_get_str_or_blob country
D (1425) nvs: nvs_get ap.ftm_r 1
D (1425) nvs: nvs_get sta.ft 1
D (1425) nvs: nvs_get sta.owe 1
D (1435) nvs: nvs_get sta.trans_d 1
D (1435) nvs: nvs_get sta.sae_h2e 1
D (1435) nvs: nvs_get sta.bss_retry 1
D (1445) nvs: nvs_get_str_or_blob sta.owe_data
D (1445) nvs: nvs_set ap.sndchan 1 1
I (1455) wifi:wifi firmware version: 57982fe
I (1455) wifi:wifi certification version: v7.0
I (1455) wifi:config NVS flash: enabled
I (1465) wifi:config nano formating: disabled
I (1465) wifi:Init data frame dynamic rx buffer num: 32
I (1475) wifi:Init management frame dynamic rx buffer num: 32
I (1475) wifi:Init management short buffer num: 32
I (1485) wifi:Init dynamic tx buffer num: 32
I (1485) wifi:Init static rx buffer size: 1600
I (1485) wifi:Init static rx buffer num: 10
I (1495) wifi:Init dynamic rx buffer num: 32
I (1495) wifi_init: rx ba win: 6
I (1505) wifi_init: tcpip mbox: 32
I (1505) wifi_init: udp mbox: 6
I (1505) wifi_init: tcp mbox: 6
I (1515) wifi_init: tcp tx win: 5744
I (1515) wifi_init: tcp rx win: 5744
I (1525) wifi_init: tcp mss: 1440
I (1525) wifi_init: WiFi IRAM OP enabled
I (1525) wifi_init: WiFi RX IRAM OP enabled
I (1535) example: Setting WiFi configuration SSID TPwpa2...
D (1545) wifi:clear blacklist
I (1545) wpa: WPA2 ENTERPRISE VERSION: [v2.0] enable

D (1545) wpa: WPA2 ENTERPRISE CRYPTO INIT.

D (1555) adc_share_hw_ctrl: Wi-Fi takes adc2 lock.
I (1555) phy_init: phy_version 4670,719f9f6,Feb 18 2021,17:07:07
D (1565) phy_init: loading PHY init data from application binary
D (1575) nvs: nvs_open_from_partition phy 0
D (1575) nvs: nvs_get cal_version 4
D (1575) nvs: nvs_get_str_or_blob cal_mac
D (1585) efuse: In EFUSE_BLK0__DATA2_REG is used 8 bits starting with 8 bit
D (1585) efuse: In EFUSE_BLK0__DATA2_REG is used 8 bits starting with 0 bit
D (1595) efuse: In EFUSE_BLK0__DATA1_REG is used 8 bits starting with 24 bit
D (1605) efuse: In EFUSE_BLK0__DATA1_REG is used 8 bits starting with 16 bit
D (1615) efuse: In EFUSE_BLK0__DATA1_REG is used 8 bits starting with 8 bit
D (1615) efuse: In EFUSE_BLK0__DATA1_REG is used 8 bits starting with 0 bit
D (1625) efuse: In EFUSE_BLK0__DATA2_REG is used 8 bits starting with 16 bit
D (1635) nvs: nvs_get_str_or_blob cal_data
D (1645) nvs: nvs_close 3
D (1645) efuse: In EFUSE_BLK0__DATA2_REG is used 8 bits starting with 8 bit
D (1645) efuse: In EFUSE_BLK0__DATA2_REG is used 8 bits starting with 0 bit
D (1655) efuse: In EFUSE_BLK0__DATA1_REG is used 8 bits starting with 24 bit
D (1665) efuse: In EFUSE_BLK0__DATA1_REG is used 8 bits starting with 16 bit
D (1665) efuse: In EFUSE_BLK0__DATA1_REG is used 8 bits starting with 8 bit
D (1675) efuse: In EFUSE_BLK0__DATA1_REG is used 8 bits starting with 0 bit
D (1685) efuse: In EFUSE_BLK0__DATA2_REG is used 8 bits starting with 16 bit
D (1775) wifi:filter: set rx policy=0
I (1775) wifi:mode : sta (c8:f0:9e:9e:1f:a0)
I (1775) wifi:enable tsf
D (1775) wifi:filter: set rx policy=1
D (1775) wifi:connect status 0 -> 0
D (1775) event: running post WIFI_EVENT:2 with handler 0x400f20b0 and context 0x3ffbcb78 on loop 0x3ffbb9f8
D (1785) wifi_init_default: wifi_start esp-netif:0x3ffbc924 event-id2
D (1795) wifi_init_default: WIFI mac address: c8 f0 9e 9e 1f a0
D (1805) esp_netif_lwip: check: remote, if=0x3ffbc924 fn=0x400de0bc

D (1805) esp_netif_lwip: call api in lwip: ret=0x0, give sem
D (1815) esp_netif_handlers: esp_netif action has started with netif0x3ffbc924 from event_id=2
D (1825) esp_netif_lwip: check: remote, if=0x3ffbc924 fn=0x400de8a4

D (1825) esp_netif_lwip: esp_netif_start_api 0x3ffbc924
D (1835) esp_netif_lwip: esp_netif_get_hostname esp_netif:0x3ffbc924
D (1845) esp_netif_lwip: check: local, if=0x3ffbc924 fn=0x400df3a8

D (1845) esp_netif_lwip: esp_netif_update_default_netif_lwip 0x3ffbc924
D (1855) esp_netif_lwip: call api in lwip: ret=0x0, give sem
D (1855) event: running post WIFI_EVENT:2 with handler 0x400d8e24 and context 0x3ffc3260 on loop 0x3ffbb9f8
D (1865) wifi:Start wifi connect
D (1875) wifi:connect status 0 -> 0
D (1875) wifi:connect chan=0
D (1875) wifi:first chan=1
D (1885) wifi:connect status 0 -> 1
D (1885) wifi:filter: set rx policy=3
D (1885) wifi:clear scan ap list
D (1885) wifi:start scan: type=0x50f, priority=2, cb=0x40129748, arg=0x0, ss_state=0x1, time=117876, index=0
D (1895) wifi:perform scan: ss_state=0x9, chan<1,0>, dur<0,120>
D (2025) wifi:scan end: arg=0x0, status=0, ss_state=0x3
D (2025) wifi:perform scan: ss_state=0x9, chan<2,0>, dur<0,120>
D (2145) wifi:scan end: arg=0x0, status=0, ss_state=0x3
D (2145) wifi:perform scan: ss_state=0x9, chan<3,0>, dur<0,120>
D (2265) wifi:scan end: arg=0x0, status=0, ss_state=0x3
D (2275) wifi:perform scan: ss_state=0x9, chan<4,0>, dur<0,120>
D (2395) wifi:scan end: arg=0x0, status=0, ss_state=0x3
D (2395) wifi:perform scan: ss_state=0x9, chan<5,0>, dur<0,120>
D (2515) wifi:scan end: arg=0x0, status=0, ss_state=0x3
D (2515) wifi:perform scan: ss_state=0x9, chan<6,0>, dur<0,120>
D (2525) wifi:rsn valid: gcipher=3 ucipher=3 akm=4

D (2525) wpa: rsn_ie - hexdump(len=22):
D (2525) wpa: 30 14 01 00 00 0f ac 04 01 00 00 0f ac 04 01 00 
D (2525) wpa: 00 0f ac 01 01 00 
D (2535) wifi:profile match: ss_state=0x7
D (2535) wifi:scan end: arg=0x0, status=0, ss_state=0x7
D (2535) wifi:find first mathched ssid, scan done
D (2545) wifi:filter: set rx policy=4
D (2545) wifi:first chan=1
D (2555) wifi:handoff_cb: status=0
D (2555) wifi:ap found, mac=64:70:02:bb:ba:5c
D (2555) wifi:new_bss=0x3ffb5c58, cur_bss=0x0, new_chan=<6,0>, cur_chan=1
D (2565) wifi:filter: set rx policy=5
D (2565) wpa: WPA: set AP RSNXE - hexdump(len=0):
I (2575) wifi:new:<6,0>, old:<1,0>, ap:<255,255>, sta:<6,0>, prof:1
D (2575) wifi:connect_op: status=0, auth=4, cipher=3 
D (2585) wpa: RSN: PMKSA cache search - network_ctx=0x0 try_opportunistic=0
D (2585) wpa: RSN: Search for BSSID 64:70:02:bb:ba:5c
D (2595) wpa: RSN: No PMKSA cache entry found
D (3275) wifi:auth mode is not none
D (3275) wifi:connect_bss: auth=1, reconnect=0
I (3275) wifi:state: init -> auth (b0)
D (3275) wifi:start 1s AUTH timer
D (3275) wifi:clear scan ap list
D (3285) wifi:recv auth: seq=2, status=0
I (3285) wifi:state: auth -> assoc (0)
D (3285) wifi:restart connect 1s timer for assoc
D (3295) wifi:recv assoc: type=0x10
D (3295) wpa: WPA: Association event - clear replay counter
D (3305) wpa: WPA: Clear old PTK
D (3305) wifi:filter: set rx policy=6
I (3305) wifi:state: assoc -> run (10)
I (3315) wpa: wpa2_task prio:2, stack:6656

D (3315) wifi:start 30s connect timer for 4 way handshake
D (3325) wpa: WPA2: wifi->wpa2 api completed sig(1073443060)
D (3325) wpa: WPA2: wpa2 api return, sm->state(1)
D (3335) wpa: IEEE 802.1X RX: version=2 type=0 length=5
D (3335) wpa: WPA2: wifi->wpa2 api completed sig(1073443060)
D (3345) wpa: WPA2: wpa2 api return, sm->state(1)
D (3355) wpa: IEEE 802.1X RX: version=2 type=0 length=5
D (3355) wpa: WPA2: wifi->wpa2 api completed sig(1073450836)
D (3355) wpa: WPA2: wpa2 api return, sm->state(1)
D (3385) wpa: IEEE 802.1X RX: version=2 type=0 length=41
D (3385) wpa: EAP: configuration does not allow: vendor 0 method 26
D (3385) wpa: EAP: vendor 0 method 26 not allowed
D (3395) wpa: WPA2: wifi->wpa2 api completed sig(1073443060)
D (3395) wpa: WPA2: wpa2 api return, sm->state(1)
D (3415) wpa: IEEE 802.1X RX: version=2 type=0 length=6
D (3415) wpa: TLS: Phase2 EAP types - hexdump(len=8):
D (3415) wpa: 00 00 00 00 1a 00 00 00 
D (3415) wpa: TLS: using phase1 config options
D (3425) wpa: SSL: Received packet(len=6) - Flags 0x20
D (3425) wpa: EAP-PEAP: Start (server ver=0, own ver=1)
D (3435) wpa: EAP-PEAP: Using PEAP version 0
I (3435) mbedtls: ssl_msg.c:2177 => flush output

I (3445) mbedtls: ssl_msg.c:2188 <= flush output

I (3445) mbedtls: ssl_tls.c:3709 client state: MBEDTLS_SSL_HELLO_REQUEST

I (3455) mbedtls: ssl_msg.c:2177 => flush output

I (3465) mbedtls: ssl_msg.c:2188 <= flush output

I (3465) mbedtls: ssl_tls.c:3709 client state: MBEDTLS_SSL_CLIENT_HELLO

I (3475) mbedtls: ssl_client.c:927 => write client hello

W (3485) mbedtls: ssl_client.c:261 got supported group(001d)

W (3485) mbedtls: ssl_client.c:261 got supported group(0017)

W (3495) mbedtls: ssl_client.c:261 got supported group(0018)

W (3495) mbedtls: ssl_client.c:261 got supported group(0019)

W (3505) mbedtls: ssl_client.c:261 got supported group(001a)

W (3515) mbedtls: ssl_client.c:261 got supported group(001b)

W (3515) mbedtls: ssl_client.c:261 got supported group(001c)

I (3525) mbedtls: ssl_msg.c:2626 => write handshake message

I (3535) mbedtls: ssl_msg.c:2793 => write record

I (3535) mbedtls: ssl_msg.c:2937 <= write record

I (3545) mbedtls: ssl_msg.c:2754 <= write handshake message

I (3545) mbedtls: ssl_client.c:996 <= write client hello

I (3555) mbedtls: ssl_msg.c:2177 => flush output

I (3565) mbedtls: ssl_msg.c:2194 message length: 232, out_left: 232

I (3565) mbedtls: ssl_msg.c:2201 ssl->f_send() returned 232 (-0xffffff18)

I (3575) mbedtls: ssl_msg.c:2229 <= flush output

I (3585) mbedtls: ssl_tls.c:3709 client state: MBEDTLS_SSL_SERVER_HELLO

I (3585) mbedtls: ssl_tls12_client.c:1231 => parse server hello

I (3595) mbedtls: ssl_msg.c:4002 => read record

I (3605) mbedtls: ssl_msg.c:1962 => fetch input

I (3605) mbedtls: ssl_msg.c:2116 in_left: 0, nb_want: 5

I (3615) wpa: len=5 not available in input
I (3615) mbedtls: ssl_msg.c:2141 in_left: 0, nb_want: 5

D (3625) wpa: SSL: 232 bytes left to be sent out (of total 232 bytes)
D (3625) wpa: WPA2: wifi->wpa2 api completed sig(1073450836)
D (3635) wpa: WPA2: wpa2 api return, sm->state(1)
D (3675) wpa: IEEE 802.1X RX: version=2 type=0 length=755
D (3685) wpa: SSL: Received packet(len=755) - Flags 0x80
D (3685) wpa: SSL: TLS Message Length: 745
I (3685) mbedtls: ssl_msg.c:2177 => flush output

I (3685) mbedtls: ssl_msg.c:2188 <= flush output

I (3695) mbedtls: ssl_tls.c:3709 client state: MBEDTLS_SSL_SERVER_HELLO

I (3705) mbedtls: ssl_tls12_client.c:1231 => parse server hello

I (3705) mbedtls: ssl_msg.c:4002 => read record

I (3715) mbedtls: ssl_msg.c:1962 => fetch input

I (3715) mbedtls: ssl_msg.c:2116 in_left: 0, nb_want: 5

I (3725) mbedtls: ssl_msg.c:2141 in_left: 0, nb_want: 5

I (3735) mbedtls: ssl_msg.c:2144 ssl->f_recv(_timeout)() returned 5 (-0xfffffffb)

I (3735) mbedtls: ssl_msg.c:2164 <= fetch input

I (3745) mbedtls: ssl_msg.c:1962 => fetch input

I (3745) mbedtls: ssl_msg.c:2116 in_left: 5, nb_want: 745

I (3755) mbedtls: ssl_msg.c:2141 in_left: 5, nb_want: 745

I (3765) mbedtls: ssl_msg.c:2144 ssl->f_recv(_timeout)() returned 740 (-0xfffffd1c)

I (3775) mbedtls: ssl_msg.c:2164 <= fetch input

I (3775) mbedtls: ssl_msg.c:4076 <= read record

I (3785) mbedtls: ssl_tls12_client.c:1509 server hello, total extension length: 9

I (3785) mbedtls: ssl_tls12_client.c:1739 <= parse server hello

I (3795) mbedtls: ssl_msg.c:2177 => flush output

I (3805) mbedtls: ssl_msg.c:2188 <= flush output

I (3805) mbedtls: ssl_tls.c:3709 client state: MBEDTLS_SSL_SERVER_CERTIFICATE

I (3815) mbedtls: ssl_tls.c:7325 => parse certificate

I (3825) mbedtls: ssl_msg.c:4002 => read record

I (3825) mbedtls: ssl_msg.c:4076 <= read record

I (3835) mbedtls: ssl_tls.c:7436 <= parse certificate

I (3835) mbedtls: ssl_msg.c:2177 => flush output

I (3845) mbedtls: ssl_msg.c:2188 <= flush output

I (3845) mbedtls: ssl_tls.c:3709 client state: MBEDTLS_SSL_SERVER_KEY_EXCHANGE

I (3855) mbedtls: ssl_tls12_client.c:2170 => parse server key exchange

I (3865) mbedtls: ssl_msg.c:4002 => read record

I (3865) mbedtls: ssl_msg.c:4076 <= read record

I (3875) mbedtls: ssl_tls12_client.c:1883 ECDH curve: x25519

I (3895) mbedtls: ssl_tls12_client.c:2569 <= parse server key exchange

I (3895) mbedtls: ssl_msg.c:2177 => flush output

I (3895) mbedtls: ssl_msg.c:2188 <= flush output

I (3895) mbedtls: ssl_tls.c:3709 client state: MBEDTLS_SSL_CERTIFICATE_REQUEST

I (3905) mbedtls: ssl_tls12_client.c:2609 => parse certificate request

I (3915) mbedtls: ssl_msg.c:4002 => read record

I (3925) mbedtls: ssl_msg.c:4076 <= read record

I (3925) mbedtls: ssl_tls12_client.c:2784 <= parse certificate request

I (3935) mbedtls: ssl_msg.c:2177 => flush output

I (3935) mbedtls: ssl_msg.c:2188 <= flush output

I (3945) mbedtls: ssl_tls.c:3709 client state: MBEDTLS_SSL_SERVER_HELLO_DONE

I (3955) mbedtls: ssl_tls12_client.c:2795 => parse server hello done

I (3955) mbedtls: ssl_msg.c:4002 => read record

I (3965) mbedtls: ssl_msg.c:4072 reuse previously read message

I (3975) mbedtls: ssl_msg.c:4076 <= read record

I (3975) mbedtls: ssl_tls12_client.c:2825 <= parse server hello done

I (3985) mbedtls: ssl_msg.c:2177 => flush output

I (3985) mbedtls: ssl_msg.c:2188 <= flush output

I (3995) mbedtls: ssl_tls.c:3709 client state: MBEDTLS_SSL_CLIENT_CERTIFICATE

I (4005) mbedtls: ssl_tls.c:6702 => write certificate

I (4005) mbedtls: ssl_tls.c:6716 <= skip write certificate

I (4015) mbedtls: ssl_msg.c:2177 => flush output

I (4025) mbedtls: ssl_msg.c:2188 <= flush output

I (4025) mbedtls: ssl_tls.c:3709 client state: MBEDTLS_SSL_CLIENT_KEY_EXCHANGE

I (4035) mbedtls: ssl_tls12_client.c:2840 => write client key exchange

I (4525) mbedtls: ssl_msg.c:2626 => write handshake message

I (4525) mbedtls: ssl_msg.c:2793 => write record

I (4525) mbedtls: ssl_msg.c:2177 => flush output

I (4535) mbedtls: ssl_msg.c:2194 message length: 42, out_left: 42

I (4545) mbedtls: ssl_msg.c:2201 ssl->f_send() returned 42 (-0xffffffd6)

I (4545) mbedtls: ssl_msg.c:2229 <= flush output

I (4555) mbedtls: ssl_msg.c:2937 <= write record

I (4555) mbedtls: ssl_msg.c:2754 <= write handshake message

I (4565) mbedtls: ssl_tls12_client.c:3363 <= write client key exchange

I (4575) mbedtls: ssl_msg.c:2177 => flush output

I (4575) mbedtls: ssl_msg.c:2188 <= flush output

I (4585) mbedtls: ssl_tls.c:3709 client state: MBEDTLS_SSL_CERTIFICATE_VERIFY

I (4595) mbedtls: ssl_tls12_client.c:3413 => write certificate verify

I (4595) mbedtls: ssl_tls.c:6304 => derive keys

I (4605) mbedtls: ssl_tls.c:6469 => calc verify sha384

I (4615) mbedtls: ssl_tls.c:6477 <= calc verify

I (4625) mbedtls: ssl_tls.c:6358 <= derive keys

I (4625) mbedtls: ssl_tls12_client.c:3439 <= skip write certificate verify

I (4635) mbedtls: ssl_msg.c:2177 => flush output

I (4635) mbedtls: ssl_msg.c:2188 <= flush output

I (4645) mbedtls: ssl_tls.c:3709 client state: MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC

I (4655) mbedtls: ssl_msg.c:5053 => write change cipher spec

I (4655) mbedtls: ssl_msg.c:2626 => write handshake message

I (4665) mbedtls: ssl_msg.c:2793 => write record

I (4665) mbedtls: ssl_msg.c:2177 => flush output

I (4675) mbedtls: ssl_msg.c:2194 message length: 6, out_left: 6

I (4685) mbedtls: ssl_msg.c:2201 ssl->f_send() returned 6 (-0xfffffffa)

I (4685) mbedtls: ssl_msg.c:2229 <= flush output

I (4695) mbedtls: ssl_msg.c:2937 <= write record

I (4705) mbedtls: ssl_msg.c:2754 <= write handshake message

I (4705) mbedtls: ssl_msg.c:5067 <= write change cipher spec

I (4715) mbedtls: ssl_msg.c:2177 => flush output

I (4715) mbedtls: ssl_msg.c:2188 <= flush output

I (4725) mbedtls: ssl_tls.c:3709 client state: MBEDTLS_SSL_CLIENT_FINISHED

I (4735) mbedtls: ssl_tls.c:7707 => write finished

I (4735) mbedtls: ssl_tls.c:7583 => calc  finished tls sha384

I (4745) mbedtls: ssl_tls.c:7609 <= calc  finished

I (4745) mbedtls: ssl_msg.c:2626 => write handshake message

I (4755) mbedtls: ssl_msg.c:2793 => write record

I (4765) mbedtls: ssl_msg.c:718 => encrypt buf

I (4765) mbedtls: ssl_msg.c:1271 <= encrypt buf

I (4775) mbedtls: ssl_msg.c:2177 => flush output

I (4775) mbedtls: ssl_msg.c:2194 message length: 45, out_left: 45

I (4785) mbedtls: ssl_msg.c:2201 ssl->f_send() returned 45 (-0xffffffd3)

I (4795) mbedtls: ssl_msg.c:2229 <= flush output

I (4795) mbedtls: ssl_msg.c:2937 <= write record

I (4805) mbedtls: ssl_msg.c:2754 <= write handshake message

I (4805) mbedtls: ssl_tls.c:7807 <= write finished

I (4815) mbedtls: ssl_msg.c:2177 => flush output

I (4825) mbedtls: ssl_msg.c:2188 <= flush output

I (4825) mbedtls: ssl_tls.c:3709 client state: MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC

I (4835) mbedtls: ssl_msg.c:5076 => parse change cipher spec

I (4845) mbedtls: ssl_msg.c:4002 => read record

I (4845) mbedtls: ssl_msg.c:1962 => fetch input

I (4855) mbedtls: ssl_msg.c:2116 in_left: 0, nb_want: 5

I (4855) wpa: len=5 not available in input
I (4865) mbedtls: ssl_msg.c:2141 in_left: 0, nb_want: 5

D (4865) wpa: SSL: 93 bytes left to be sent out (of total 93 bytes)
D (4875) wpa: WPA2: wifi->wpa2 api completed sig(1073443060)
D (4885) wpa: WPA2: wpa2 api return, sm->state(1)
D (4925) wpa: IEEE 802.1X RX: version=2 type=0 length=61
D (4925) wpa: SSL: Received packet(len=61) - Flags 0x80
D (4925) wpa: SSL: TLS Message Length: 51
I (4925) mbedtls: ssl_msg.c:2177 => flush output

I (4935) mbedtls: ssl_msg.c:2188 <= flush output

I (4935) mbedtls: ssl_tls.c:3709 client state: MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC

I (4945) mbedtls: ssl_msg.c:5076 => parse change cipher spec

I (4955) mbedtls: ssl_msg.c:4002 => read record

I (4955) mbedtls: ssl_msg.c:1962 => fetch input

I (4965) mbedtls: ssl_msg.c:2116 in_left: 0, nb_want: 5

I (4975) mbedtls: ssl_msg.c:2141 in_left: 0, nb_want: 5

I (4975) mbedtls: ssl_msg.c:2144 ssl->f_recv(_timeout)() returned 5 (-0xfffffffb)

I (4985) mbedtls: ssl_msg.c:2164 <= fetch input

I (4995) mbedtls: ssl_msg.c:1962 => fetch input

I (4995) mbedtls: ssl_msg.c:2116 in_left: 5, nb_want: 6

I (5005) mbedtls: ssl_msg.c:2141 in_left: 5, nb_want: 6

I (5005) mbedtls: ssl_msg.c:2144 ssl->f_recv(_timeout)() returned 1 (-0xffffffff)

I (5015) mbedtls: ssl_msg.c:2164 <= fetch input

I (5025) mbedtls: ssl_msg.c:4076 <= read record

I (5025) mbedtls: ssl_msg.c:5127 <= parse change cipher spec

I (5035) mbedtls: ssl_msg.c:2177 => flush output

I (5035) mbedtls: ssl_msg.c:2188 <= flush output

I (5045) mbedtls: ssl_tls.c:3709 client state: MBEDTLS_SSL_SERVER_FINISHED

I (5055) mbedtls: ssl_tls.c:7820 => parse finished

I (5055) mbedtls: ssl_tls.c:7583 => calc  finished tls sha384

I (5065) mbedtls: ssl_tls.c:7609 <= calc  finished

I (5075) mbedtls: ssl_msg.c:4002 => read record

I (5075) mbedtls: ssl_msg.c:1962 => fetch input

I (5085) mbedtls: ssl_msg.c:2116 in_left: 0, nb_want: 5

I (5085) mbedtls: ssl_msg.c:2141 in_left: 0, nb_want: 5

I (5095) mbedtls: ssl_msg.c:2144 ssl->f_recv(_timeout)() returned 5 (-0xfffffffb)

I (5105) mbedtls: ssl_msg.c:2164 <= fetch input

I (5105) mbedtls: ssl_msg.c:1962 => fetch input

I (5115) mbedtls: ssl_msg.c:2116 in_left: 5, nb_want: 45

I (5115) mbedtls: ssl_msg.c:2141 in_left: 5, nb_want: 45

I (5125) mbedtls: ssl_msg.c:2144 ssl->f_recv(_timeout)() returned 40 (-0xffffffd8)

I (5135) mbedtls: ssl_msg.c:2164 <= fetch input

I (5135) mbedtls: ssl_msg.c:1306 => decrypt buf

I (5145) mbedtls: ssl_msg.c:1928 <= decrypt buf

I (5145) mbedtls: ssl_msg.c:4076 <= read record

I (5155) mbedtls: ssl_tls.c:7890 <= parse finished

I (5165) mbedtls: ssl_msg.c:2177 => flush output

I (5165) mbedtls: ssl_msg.c:2188 <= flush output

I (5175) mbedtls: ssl_tls.c:3709 client state: MBEDTLS_SSL_FLUSH_BUFFERS

I (5175) mbedtls: ssl_tls12_client.c:3756 handshake: done

I (5185) mbedtls: ssl_msg.c:2177 => flush output

I (5195) mbedtls: ssl_msg.c:2188 <= flush output

I (5195) mbedtls: ssl_tls.c:3709 client state: MBEDTLS_SSL_HANDSHAKE_WRAPUP

I (5205) wpa: application data is null, adding one byte for ack
D (5215) wpa: SSL: No data to be sent out
D (5215) wpa: EAP-PEAP: TLS done, proceed to Phase 2
D (5215) wpa: EAP-PEAP: using label 'client EAP encryption' in key derivation
D (5225) wpa: EAP-PEAP: Derived key - hexdump(len=64):
D (5235) wpa: 48 d7 d7 9f 8a 25 14 43 28 77 25 ae 68 86 67 7e 
D (5235) wpa: a6 da f0 10 14 7d e7 c9 b5 a6 fa b5 5f 85 63 31 
D (5245) wpa: 21 0f b5 8a 19 5c 13 9e 18 30 be 3e fe 6b 30 4b 
D (5245) wpa: ba e7 9b c0 57 db 2d a8 b7 02 f3 a3 5d 51 ac 62 
D (5255) wpa: EAP-PEAP: Derived Session-Id - hexdump(len=65):
D (5265) wpa: 19 00 00 00 02 ed ba f3 28 ae 03 36 be 85 12 91 
D (5265) wpa: 2e 68 ad 25 f9 2c d7 82 ce 88 31 12 fa a4 31 99 
D (5275) wpa: a7 64 99 b4 41 37 32 32 66 37 38 62 62 34 36 63 
D (5275) wpa: 35 34 33 63 36 38 36 63 63 44 4f 57 4e 47 52 44 
D (5285) wpa: 01 
D (5285) wpa: SSL: Building ACK (type=25 id=5 ver=0) 

D (5295) wpa: WPA2: wifi->wpa2 api completed sig(1073443060)
D (5295) wpa: WPA2: wpa2 api return, sm->state(1)
D (5315) wpa: IEEE 802.1X RX: version=2 type=0 length=36
D (5315) wpa: SSL: Received packet(len=36) - Flags 0x00
D (5315) wpa: EAP-PEAP: received 30 bytes encrypted data for Phase 2

I (5325) mbedtls: ssl_msg.c:5632 => read

I (5325) mbedtls: ssl_msg.c:4002 => read record

I (5335) mbedtls: ssl_msg.c:1962 => fetch input

I (5335) mbedtls: ssl_msg.c:2116 in_left: 0, nb_want: 5

I (5345) mbedtls: ssl_msg.c:2141 in_left: 0, nb_want: 5

I (5355) mbedtls: ssl_msg.c:2144 ssl->f_recv(_timeout)() returned 5 (-0xfffffffb)

I (5355) mbedtls: ssl_msg.c:2164 <= fetch input

I (5365) mbedtls: ssl_msg.c:1962 => fetch input

I (5365) mbedtls: ssl_msg.c:2116 in_left: 5, nb_want: 30

I (5375) mbedtls: ssl_msg.c:2141 in_left: 5, nb_want: 30

I (5385) mbedtls: ssl_msg.c:2144 ssl->f_recv(_timeout)() returned 25 (-0xffffffe7)

I (5395) mbedtls: ssl_msg.c:2164 <= fetch input

I (5395) mbedtls: ssl_msg.c:1306 => decrypt buf

I (5405) mbedtls: ssl_msg.c:1928 <= decrypt buf

I (5405) mbedtls: ssl_msg.c:4076 <= read record

I (5415) mbedtls: ssl_msg.c:5826 <= read

D (5415) wpa: EAP-PEAP: Decrypted Phase 2 EAP - hexdump(len=1):
D (5425) wpa: 01 
D (5425) wpa: EAP-PEAP: received Phase 2: code=1 identifier=6 length=5

D (5435) wpa: EAP-PEAP: Phase 2 Request: type=1

D (5435) wpa: EAP-PEAP: Encrypting Phase 2 data - hexdump(len=12):
D (5445) wpa: 02 06 00 0c 01 70 72 75 65 62 61 31 
I (5445) mbedtls: ssl_msg.c:5914 => write

I (5455) mbedtls: ssl_msg.c:2793 => write record

I (5455) mbedtls: ssl_msg.c:718 => encrypt buf

I (5465) mbedtls: ssl_msg.c:1271 <= encrypt buf

I (5465) mbedtls: ssl_msg.c:2177 => flush output

I (5475) mbedtls: ssl_msg.c:2194 message length: 37, out_left: 37

I (5485) mbedtls: ssl_msg.c:2201 ssl->f_send() returned 37 (-0xffffffdb)

I (5485) mbedtls: ssl_msg.c:2229 <= flush output

I (5495) mbedtls: ssl_msg.c:2937 <= write record

I (5495) mbedtls: ssl_msg.c:5938 <= write

D (5505) wpa: SSL: 37 bytes left to be sent out (of total 37 bytes)
D (5515) wpa: WPA2: wifi->wpa2 api completed sig(1073443060)
D (5515) wpa: WPA2: wpa2 api return, sm->state(1)
D (5535) wpa: IEEE 802.1X RX: version=2 type=0 length=72
D (5535) wpa: SSL: Received packet(len=72) - Flags 0x00
D (5535) wpa: EAP-PEAP: received 66 bytes encrypted data for Phase 2

I (5535) mbedtls: ssl_msg.c:5632 => read

I (5545) mbedtls: ssl_msg.c:4002 => read record

I (5545) mbedtls: ssl_msg.c:1962 => fetch input

I (5555) mbedtls: ssl_msg.c:2116 in_left: 0, nb_want: 5

I (5555) mbedtls: ssl_msg.c:2141 in_left: 0, nb_want: 5

I (5565) mbedtls: ssl_msg.c:2144 ssl->f_recv(_timeout)() returned 5 (-0xfffffffb)

I (5575) mbedtls: ssl_msg.c:2164 <= fetch input

I (5575) mbedtls: ssl_msg.c:1962 => fetch input

I (5585) mbedtls: ssl_msg.c:2116 in_left: 5, nb_want: 66

I (5595) mbedtls: ssl_msg.c:2141 in_left: 5, nb_want: 66

I (5595) mbedtls: ssl_msg.c:2144 ssl->f_recv(_timeout)() returned 61 (-0xffffffc3)

I (5605) mbedtls: ssl_msg.c:2164 <= fetch input

I (5615) mbedtls: ssl_msg.c:1306 => decrypt buf

I (5615) mbedtls: ssl_msg.c:1928 <= decrypt buf

I (5625) mbedtls: ssl_msg.c:4076 <= read record

I (5625) mbedtls: ssl_msg.c:5826 <= read

D (5635) wpa: EAP-PEAP: Decrypted Phase 2 EAP - hexdump(len=37):
D (5635) wpa: 1a 01 07 00 24 10 79 6f f4 65 d0 01 dd 17 0b eb 
D (5645) wpa: f2 b7 24 f3 88 cc 4c 41 50 54 4f 50 2d 48 34 30 
D (5645) wpa: 31 41 30 43 45 
D (5655) wpa: EAP-PEAP: received Phase 2: code=1 identifier=7 length=41

D (5655) wpa: EAP-PEAP: Phase 2 Request: type=26

D (5665) wpa: EAP-PEAP: Selected Phase 2 EAP vendor 0 method 26

D (5675) wpa: EAP-MSCHAPV2: RX identifier 7 mschapv2_id 7
D (5675) wpa: EAP-MSCHAPV2: Received challenge
D (5685) wpa: EAP-MSCHAPV2: Authentication Servername - hexdump(len=15):
D (5685) wpa: 4c 41 50 54 4f 50 2d 48 34 30 31 41 30 43 45 
D (5695) wpa: EAP-MSCHAPV2: Generate Challenge Response

D (5695) wpa: MSCHAPV2: Identity - hexdump(len=7):
D (5705) wpa: 70 72 75 65 62 61 31 
D (5705) wpa: MSCHAPV2: Username - hexdump(len=7):
D (5715) wpa: 70 72 75 65 62 61 31 
D (5715) wpa: MSCHAPV2: auth_challenge - hexdump(len=16):
D (5725) wpa: 79 6f f4 65 d0 01 dd 17 0b eb f2 b7 24 f3 88 cc 
D (5725) wpa: MSCHAPV2: peer_challenge - hexdump(len=16):
D (5735) wpa: c9 13 d5 36 98 8d 6b 26 10 99 03 ff 28 82 94 b4 
D (5735) wpa: MSCHAPV2: username - hexdump(len=7):
D (5745) wpa: 70 72 75 65 62 61 31 
D (5745) wpa: MSCHAPV2: password - hexdump(len=10):
D (5755) wpa: 64 61 6e 69 65 6c 32 30 32 32 
D (5755) wpa: MSCHAPV2: NT Response - hexdump(len=24):
D (5765) wpa: a2 d4 c1 8f e0 76 2e cd 13 af e2 26 97 a4 b9 98 
D (5765) wpa: de 61 44 c7 7b fc 1b 5a 
D (5775) wpa: MSCHAPV2: Auth Response - hexdump(len=20):
D (5775) wpa: e2 3d 40 24 56 c6 dc 17 b2 05 2e d2 d9 0b 34 05 
D (5785) wpa: a8 55 de a2 
D (5785) wpa: MSCHAPV2: Master Key - hexdump(len=16):
D (5785) wpa: 9a 31 ec 0f 03 ad 3c 59 01 05 15 06 b1 3a 05 8f 
D (5795) wpa: EAP-MSCHAPV2: TX identifier 7 mschapv2_id 7 (response)
D (5805) esp_netif_lwip: esp_netif_get_ip_info esp_netif:0x3ffbc924
I (5805) example: ~~~~~~~~~~~
D (5815) wpa: EAP-PEAP: Encrypting Phase 2 data - hexdump(len=66):
I (5815) example: IP:0.0.0.0
D (5825) wpa: 02 07 00 42 1a 02 07 00 3d 31 c9 13 d5 36 98 8d 
I (5825) example: MASK:0.0.0.0
D (5835) wpa: 6b 26 10 99 03 ff 28 82 94 b4 00 00 00 00 00 00 
I (5835) example: GW:0.0.0.0
D (5845) wpa: 00 00 a2 d4 c1 8f e0 76 2e cd 13 af e2 26 97 a4 
I (5845) example: ~~~~~~~~~~~
D (5855) wpa: b9 98 de 61 44 c7 7b fc 1b 5a 00 70 72 75 65 62 
D (5855) wpa: 61 31 
I (5855) mbedtls: ssl_msg.c:5914 => write

I (5865) mbedtls: ssl_msg.c:2793 => write record

I (5865) mbedtls: ssl_msg.c:718 => encrypt buf

I (5875) mbedtls: ssl_msg.c:1271 <= encrypt buf

I (5875) mbedtls: ssl_msg.c:2177 => flush output

I (5885) mbedtls: ssl_msg.c:2194 message length: 91, out_left: 91

I (5895) mbedtls: ssl_msg.c:2201 ssl->f_send() returned 91 (-0xffffffa5)

I (5895) mbedtls: ssl_msg.c:2229 <= flush output

I (5905) mbedtls: ssl_msg.c:2937 <= write record

I (5915) mbedtls: ssl_msg.c:5938 <= write

D (5915) wpa: SSL: 91 bytes left to be sent out (of total 91 bytes)
D (5925) wpa: WPA2: wifi->wpa2 api completed sig(1073443060)
D (5925) wpa: WPA2: wpa2 api return, sm->state(1)
D (5955) wpa: IEEE 802.1X RX: version=2 type=0 length=82
D (5955) wpa: SSL: Received packet(len=82) - Flags 0x00
D (5955) wpa: EAP-PEAP: received 76 bytes encrypted data for Phase 2

I (5955) mbedtls: ssl_msg.c:5632 => read

I (5965) mbedtls: ssl_msg.c:4002 => read record

I (5965) mbedtls: ssl_msg.c:1962 => fetch input

I (5975) mbedtls: ssl_msg.c:2116 in_left: 0, nb_want: 5

I (5975) mbedtls: ssl_msg.c:2141 in_left: 0, nb_want: 5

I (5985) mbedtls: ssl_msg.c:2144 ssl->f_recv(_timeout)() returned 5 (-0xfffffffb)

I (5995) mbedtls: ssl_msg.c:2164 <= fetch input

I (5995) mbedtls: ssl_msg.c:1962 => fetch input

I (6005) mbedtls: ssl_msg.c:2116 in_left: 5, nb_want: 76

I (6015) mbedtls: ssl_msg.c:2141 in_left: 5, nb_want: 76

I (6015) mbedtls: ssl_msg.c:2144 ssl->f_recv(_timeout)() returned 71 (-0xffffffb9)

I (6025) mbedtls: ssl_msg.c:2164 <= fetch input

I (6035) mbedtls: ssl_msg.c:1306 => decrypt buf

I (6035) mbedtls: ssl_msg.c:1928 <= decrypt buf

I (6045) mbedtls: ssl_msg.c:4076 <= read record

I (6045) mbedtls: ssl_msg.c:5826 <= read

D (6055) wpa: EAP-PEAP: Decrypted Phase 2 EAP - hexdump(len=47):
D (6055) wpa: 1a 03 07 00 2e 53 3d 45 32 33 44 34 30 32 34 35 
D (6065) wpa: 36 43 36 44 43 31 37 42 32 30 35 32 45 44 32 44 
D (6065) wpa: 39 30 42 33 34 30 35 41 38 35 35 44 45 41 32 
D (6075) wpa: EAP-PEAP: received Phase 2: code=1 identifier=8 length=51

D (6085) wpa: EAP-PEAP: Phase 2 Request: type=26

D (6085) wpa: EAP-MSCHAPV2: RX identifier 8 mschapv2_id 7
D (6095) wpa: EAP-MSCHAPV2: Received success
D (6095) wpa: EAP-MSCHAPV2: Success message - hexdump(len=0):
I (6105) wpa: EAP-MSCHAPV2: Authentication succeeded
D (6105) wpa: EAP-PEAP: Encrypting Phase 2 data - hexdump(len=6):
D (6115) wpa: 02 08 00 06 1a 03 
I (6115) mbedtls: ssl_msg.c:5914 => write

I (6125) mbedtls: ssl_msg.c:2793 => write record

I (6125) mbedtls: ssl_msg.c:718 => encrypt buf

I (6135) mbedtls: ssl_msg.c:1271 <= encrypt buf

I (6135) mbedtls: ssl_msg.c:2177 => flush output

I (6145) mbedtls: ssl_msg.c:2194 message length: 31, out_left: 31

I (6155) mbedtls: ssl_msg.c:2201 ssl->f_send() returned 31 (-0xffffffe1)

I (6155) mbedtls: ssl_msg.c:2229 <= flush output

I (6165) mbedtls: ssl_msg.c:2937 <= write record

I (6165) mbedtls: ssl_msg.c:5938 <= write

D (6175) wpa: SSL: 31 bytes left to be sent out (of total 31 bytes)
D (6185) wpa: WPA2: wifi->wpa2 api completed sig(1073443060)
D (6185) wpa: WPA2: wpa2 api return, sm->state(1)
D (6215) wpa: IEEE 802.1X RX: version=2 type=0 length=46
D (6215) wpa: SSL: Received packet(len=46) - Flags 0x00
D (6215) wpa: EAP-PEAP: received 40 bytes encrypted data for Phase 2

I (6215) mbedtls: ssl_msg.c:5632 => read

I (6225) mbedtls: ssl_msg.c:4002 => read record

I (6225) mbedtls: ssl_msg.c:1962 => fetch input

I (6235) mbedtls: ssl_msg.c:2116 in_left: 0, nb_want: 5

I (6235) mbedtls: ssl_msg.c:2141 in_left: 0, nb_want: 5

I (6245) mbedtls: ssl_msg.c:2144 ssl->f_recv(_timeout)() returned 5 (-0xfffffffb)

I (6255) mbedtls: ssl_msg.c:2164 <= fetch input

I (6255) mbedtls: ssl_msg.c:1962 => fetch input

I (6265) mbedtls: ssl_msg.c:2116 in_left: 5, nb_want: 40

I (6275) mbedtls: ssl_msg.c:2141 in_left: 5, nb_want: 40

I (6275) mbedtls: ssl_msg.c:2144 ssl->f_recv(_timeout)() returned 35 (-0xffffffdd)

I (6285) mbedtls: ssl_msg.c:2164 <= fetch input

I (6295) mbedtls: ssl_msg.c:1306 => decrypt buf

I (6295) mbedtls: ssl_msg.c:1928 <= decrypt buf

I (6305) mbedtls: ssl_msg.c:4076 <= read record

I (6305) mbedtls: ssl_msg.c:5826 <= read

D (6315) wpa: EAP-PEAP: Decrypted Phase 2 EAP - hexdump(len=11):
D (6315) wpa: 01 09 00 0b 21 80 03 00 02 00 01 
D (6325) wpa: EAP-PEAP: received Phase 2: code=1 identifier=9 length=11

D (6325) wpa: EAP-PEAP: Phase 2 Request: type=33

D (6335) wpa: EAP-TLV: Received TLVs - hexdump(len=6):
D (6335) wpa: 80 03 00 02 00 01 
D (6345) wpa: EAP-TLV: Result TLV - hexdump(len=2):
D (6345) wpa: 00 01 
I (6345) wpa: EAP-TLV: TLV Result - Success - EAP-TLV/Phase2 Completed
D (6355) wpa: EAP-PEAP: Encrypting Phase 2 data - hexdump(len=11):
D (6365) wpa: 02 09 00 0b 21 80 03 00 02 00 01 
I (6365) mbedtls: ssl_msg.c:5914 => write

I (6375) mbedtls: ssl_msg.c:2793 => write record

I (6375) mbedtls: ssl_msg.c:718 => encrypt buf

I (6385) mbedtls: ssl_msg.c:1271 <= encrypt buf

I (6385) mbedtls: ssl_msg.c:2177 => flush output

I (6395) mbedtls: ssl_msg.c:2194 message length: 40, out_left: 40

I (6405) mbedtls: ssl_msg.c:2201 ssl->f_send() returned 40 (-0xffffffd8)

I (6405) mbedtls: ssl_msg.c:2229 <= flush output

I (6415) mbedtls: ssl_msg.c:2937 <= write record

I (6415) mbedtls: ssl_msg.c:5938 <= write

D (6425) wpa: SSL: 40 bytes left to be sent out (of total 40 bytes)
D (6435) wpa: WPA2: wifi->wpa2 api completed sig(1073407732)
D (6435) wpa: WPA2: wpa2 api return, sm->state(1)
D (6465) wpa: IEEE 802.1X RX: version=2 type=0 length=4
I (6465) wpa: >>>>>wpa2 FINISH

D (6465) wpa: WPA2: wifi->wpa2 api completed sig(1)
D (6465) wpa: WPA2: wpa2 api return, sm->state(2)
D (6475) wpa: IEEE 802.1X RX: version=2 type=3 length=117

D (6475) wpa:   EAPOL-Key type=2

D (6485) wpa:   key_info 0x8a (ver=2 keyidx=0 rsvd=0 Pairwise Ack)

D (6485) wpa:   key_length=16 key_data_length=22

D (6495) wpa:   replay_counter - hexdump(len=8):
D (6495) wpa: 00 00 00 00 00 00 00 01 
D (6505) wpa:   key_nonce - hexdump(len=32):
D (6505) wpa: 82 17 e1 d0 1d 23 1b a3 27 ba ea ab 16 60 5e c8 
D (6515) wpa: 18 83 1a e1 a8 1b f5 12 5e e6 4f d3 3f b9 2a 99 
D (6515) wpa:   key_iv - hexdump(len=16):
D (6525) wpa: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
D (6525) wpa:   key_rsc - hexdump(len=8):
D (6535) wpa: 00 00 00 00 00 00 00 00 
D (6535) wpa:   key_id (reserved) - hexdump(len=8):
D (6545) wpa: 00 00 00 00 00 00 00 00 
D (6545) wpa:   key_mic - hexdump(len=16):
D (6545) wpa: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
D (6555) wpa: WPA 1/4-Way Handshake

D (6555) wpa: RSN: msg 1/4 key data - hexdump(len=22):
D (6565) wpa: dd 14 00 0f ac 04 4c 58 36 1f aa 7b 9d 73 1e 17 
D (6565) wpa: 48 41 6f 54 13 90 
D (6575) wpa: WPA: PMKID in EAPOL-Key - hexdump(len=22):
D (6575) wpa: dd 14 00 0f ac 04 4c 58 36 1f aa 7b 9d 73 1e 17 
D (6585) wpa: 48 41 6f 54 13 90 
D (6585) wpa: RSN: PMKID from Authenticator - hexdump(len=16):
D (6595) wpa: 4c 58 36 1f aa 7b 9d 73 1e 17 48 41 6f 54 13 90 
D (6595) wpa: RSN: no matching PMKID found
D (6605) wpa: WPA: PMK from EAPOL state machines - hexdump(len=32):
D (6605) wpa: 48 d7 d7 9f 8a 25 14 43 28 77 25 ae 68 86 67 7e 
D (6615) wpa: a6 da f0 10 14 7d e7 c9 b5 a6 fa b5 5f 85 63 31 
D (6625) wpa: ELOOP: pmksa_cache_set_expiration:76 called to remove timer handler=0x400ec224, removed count=0
D (6635) wpa: ELOOP: Added one timer from pmksa_cache_set_expiration:85 to call 0x400ec224, current order=0
D (6645) wpa: RSN: Added PMKSA cache entry for 64:70:02:bb:ba:5c network_ctx=0x0
D (6645) wpa: RSN: the new PMK matches with the PMKID
D (6655) wpa: RSN: PMKSA cache search - network_ctx=0x0 try_opportunistic=0
D (6665) wpa: RSN: Search for BSSID 64:70:02:bb:ba:5c
D (6665) wpa: RSN: PMKSA cache entry found - PMKID - hexdump(len=16):
D (6675) wpa: 4c 58 36 1f aa 7b 9d 73 1e 17 48 41 6f 54 13 90 
D (6675) wpa: WPA: Renewed SNonce - hexdump(len=32):
D (6685) wpa: 5d 4c ae fa 1d fa 99 82 e4 55 ae 48 5c df 31 25 
D (6685) wpa: a3 84 10 49 fa 1b f8 65 fe ba 0b 56 96 2c 06 96 
D (6695) wpa: WPA: PTK derivation - A1=c8:f0:9e:9e:1f:a0 A2=64:70:02:bb:ba:5c

D (6705) wpa: WPA: PTK - hexdump(len=48):
D (6705) wpa: b5 98 c4 46 61 64 8a c1 07 bb 91 a6 46 0e 50 95 
D (6715) wpa: af c0 82 40 eb 85 70 e3 f7 32 95 58 6a 83 a7 bd 
D (6715) wpa: d7 de 59 3c f3 d4 07 8f 12 fc 6d 38 ec f6 09 c5 
D (6725) wpa: WPA: KCK - hexdump(len=16):
D (6725) wpa: b5 98 c4 46 61 64 8a c1 07 bb 91 a6 46 0e 50 95 
D (6735) wpa: WPA: KEK - hexdump(len=16):
D (6735) wpa: af c0 82 40 eb 85 70 e3 f7 32 95 58 6a 83 a7 bd 
D (6745) wpa: WPA: TK - hexdump(len=16):
D (6745) wpa: d7 de 59 3c f3 d4 07 8f 12 fc 6d 38 ec f6 09 c5 
D (6755) wpa: WPA Send EAPOL-Key 2/4

D (6755) wpa: WPA: KCK - hexdump(len=16):
D (6765) wpa: b5 98 c4 46 61 64 8a c1 07 bb 91 a6 46 0e 50 95 
D (6765) wpa: WPA: Derived Key MIC - hexdump(len=16):
D (6775) wpa: 28 47 c7 79 3a e1 0d 9a 92 77 d5 df 85 b6 89 ae 
D (6805) wpa: IEEE 802.1X RX: version=2 type=3 length=151

D (6805) wpa:   EAPOL-Key type=2

D (6805) wpa:   key_info 0x13ca (ver=2 keyidx=0 rsvd=0 Pairwise Install Ack MIC Secure Encr)

D (6805) wpa:   key_length=16 key_data_length=56

D (6815) wpa:   replay_counter - hexdump(len=8):
D (6815) wpa: 00 00 00 00 00 00 00 02 
D (6825) wpa:   key_nonce - hexdump(len=32):
D (6825) wpa: 82 17 e1 d0 1d 23 1b a3 27 ba ea ab 16 60 5e c8 
D (6835) wpa: 18 83 1a e1 a8 1b f5 12 5e e6 4f d3 3f b9 2a 99 
D (6835) wpa:   key_iv - hexdump(len=16):
D (6845) wpa: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
D (6845) wpa:   key_rsc - hexdump(len=8):
D (6855) wpa: d9 00 00 00 00 00 00 00 
D (6855) wpa:   key_id (reserved) - hexdump(len=8):
D (6865) wpa: 00 00 00 00 00 00 00 00 
D (6865) wpa:   key_mic - hexdump(len=16):
D (6865) wpa: c8 b6 3c fc 49 2d 45 33 06 4b 24 20 b5 cf 24 6e 
D (6875) wpa: RSN: encrypted key data - hexdump(len=56):
D (6885) wpa: dd e6 de 27 0d f8 1a 2a 06 da 7b fd 23 91 b8 c3 
D (6885) wpa: 16 0f 3b 19 8b 20 1a 22 69 1e f5 34 f3 e6 4d ea 
D (6895) wpa: d1 42 c1 ca 71 7c 08 da bd a2 b7 d0 81 2f a9 84 
D (6895) wpa: 6f e7 dc 83 83 1f 88 ba 
D (6905) wpa: WPA: decrypted EAPOL-Key key data - hexdump(len=48):
D (6905) wpa: 30 14 01 00 00 0f ac 04 01 00 00 0f ac 04 01 00 
D (6915) wpa: 00 0f ac 01 01 00 dd 16 00 0f ac 01 01 00 a9 f5 
D (6925) wpa: a8 4c cd a6 db 0d 14 f2 f8 5b e8 f6 d9 a0 dd 00 
D (6925) wpa: WPA 3/4-Way Handshake

D (6925) wpa: WPA: RSN IE in EAPOL-Key - hexdump(len=22):
D (6935) wpa: 30 14 01 00 00 0f ac 04 01 00 00 0f ac 04 01 00 
D (6945) wpa: 00 0f ac 01 01 00 
D (6945) wpa: WPA: GTK in EAPOL-Key - hexdump(len=24):
D (6945) wpa: dd 16 00 0f ac 01 01 00 a9 f5 a8 4c cd a6 db 0d 
D (6955) wpa: 14 f2 f8 5b e8 f6 d9 a0 
D (6955) wpa: WPA: IE KeyData - hexdump(len=48):
D (6965) wpa: 30 14 01 00 00 0f ac 04 01 00 00 0f ac 04 01 00 
D (6965) wpa: 00 0f ac 01 01 00 dd 16 00 0f ac 01 01 00 a9 f5 
D (6975) wpa: a8 4c cd a6 db 0d 14 f2 f8 5b e8 f6 d9 a0 dd 00 
D (6985) wpa: WPA: RSC - hexdump(len=8):
D (6985) wpa: d9 00 00 00 00 00 00 00 
D (6985) wpa: RSN: received GTK in pairwise handshake - hexdump(len=18):
D (6995) wpa: 01 00 a9 f5 a8 4c cd a6 db 0d 14 f2 f8 5b e8 f6 
D (7005) wpa: d9 a0 
D (7005) wpa: tx 4/4 txcb_flags=8192

D (7005) wpa: WPA Send EAPOL-Key 4/4

D (7015) wpa: WPA: KCK - hexdump(len=16):
D (7015) wpa: b5 98 c4 46 61 64 8a c1 07 bb 91 a6 46 0e 50 95 
D (7025) wpa: WPA: Derived Key MIC - hexdump(len=16):
D (7025) wpa: 98 70 2d 38 1b 6e 90 00 9e f0 18 7f fd 20 01 a9 
D (7045) wpa: WPA: Installing PTK to the driver.

D (7045) wpa: WPA: Group Key - hexdump(len=16):
D (7045) wpa: a9 f5 a8 4c cd a6 db 0d 14 f2 f8 5b e8 f6 d9 a0 
D (7055) wpa: WPA: Judge GTK: (keyidx=1 len=16).
D (7055) wpa: WPA: Installing GTK to the driver (keyidx=1 tx=0 len=16).

D (7065) wpa: WPA: RSC - hexdump(len=6):
D (7065) wpa: d9 00 00 00 00 00 
D (7065) wpa: WPA: Key negotiation completed with 64:70:02:bb:ba:5c [PTK=CCMP GTK=CCMP]

I (7075) wifi:connected with TPwpa2, aid = 1, channel 6, BW20, bssid = 64:70:02:bb:ba:5c
I (7085) wifi:security: WPA2-ENT, phy: bgn, rssi: -62
D (7095) wifi:remove all except 64:70:02:bb:ba:5c from rc list
D (7095) wifi:clear blacklist
D (7095) wifi:filter: set rx policy=7
I (7105) wifi:pm start, type: 1

D (7105) wifi:Send sta connected event
D (7105) wifi:connect status 1 -> 5
D (7115) wifi:obss scan is disabled
D (7115) wifi:start obss scan: obss scan is stopped
I (7115) wifi:AP's beacon interval = 102400 us, DTIM period = 1
D (7125) wifi:set max rate: from <rate=130, phy=3, sig=0> to <rate=144, phy=3 sig=0>
D (7135) wifi:sig_b=0, sig_g=0, sig_n=0, max_b=22, max_g=108, max_n=144
D (7135) wifi:update trc
D (7145) event: running post WIFI_EVENT:4 with handler 0x400f20e0 and context 0x3ffbcbd8 on loop 0x3ffbb9f8
D (7155) esp_netif_handlers: esp_netif action connected with netif0x3ffbc924 from event_id=4
D (7155) esp_netif_lwip: check: remote, if=0x3ffbc924 fn=0x400dead0

D (7165) esp_netif_lwip: esp_netif_up_api esp_netif:0x3ffbc924
D (7175) esp_netif_lwip: check: local, if=0x3ffbc924 fn=0x400df3a8

D (7175) esp_netif_lwip: esp_netif_update_default_netif_lwip 0x3ffbc924
D (7185) esp_netif_lwip: call api in lwip: ret=0x0, give sem
D (7195) esp_netif_lwip: check: remote, if=0x3ffbc924 fn=0x400de700

D (7195) esp_netif_lwip: esp_netif_dhcpc_start_api esp_netif:0x3ffbc924
D (7205) esp_netif_lwip: esp_netif_start_ip_lost_timer esp_netif:0x3ffbc924
D (7215) esp_netif_lwip: if0x3ffbc924 start ip lost tmr: no need start because netif=0x3ffbc9a8 interval=120 ip=0
D (7225) esp_netif_lwip: starting dhcp client
D (7225) esp_netif_lwip: call api in lwip: ret=0x0, give sem
D (7235) event: running post WIFI_EVENT:4 with handler 0x400d8e24 and context 0x3ffc3260 on loop 0x3ffbb9f8
I (7235) wifi:<ba-add>idx:0 (ifx:0, 64:70:02:bb:ba:5c), tid:0, ssn:0, winSize:64
D (7855) esp_netif_lwip: esp_netif_get_ip_info esp_netif:0x3ffbc924
I (7855) example: ~~~~~~~~~~~
I (7855) example: IP:0.0.0.0
I (7855) example: MASK:0.0.0.0
I (7855) example: GW:0.0.0.0
I (7865) example: ~~~~~~~~~~~
D (8225) esp_netif_lwip: esp_netif_internal_dhcpc_cb lwip-netif:0x3ffbc9a8
D (8225) esp_netif_lwip: if0x3ffbc924 ip changed=1
D (8225) event: running post IP_EVENT:0 with handler 0x400f1f34 and context 0x3ffbccac on loop 0x3ffbb9f8
D (8235) wifi_init_default: Got IP wifi default handler entered
D (8235) esp_netif_handlers: esp_netif action got_ip with netif0x3ffbc924 from event_id=0
I (8245) esp_netif_handlers: sta ip: 192.168.15.104, mask: 255.255.255.0, gw: 192.168.15.1
D (8255) event: running post IP_EVENT:0 with handler 0x400d8e24 and context 0x3ffc3280 on loop 0x3ffbb9f8
D (9865) esp_netif_lwip: esp_netif_get_ip_info esp_netif:0x3ffbc924
I (9865) example: ~~~~~~~~~~~
I (9865) example: IP:192.168.15.104
I (9865) example: MASK:255.255.255.0
I (9865) example: GW:192.168.15.1
I (9875) example: ~~~~~~~~~~~
D (11875) esp_netif_lwip: esp_netif_get_ip_info esp_netif:0x3ffbc924
I (11875) example: ~~~~~~~~~~~
I (11875) example: IP:192.168.15.104
I (11875) example: MASK:255.255.255.0
I (11875) example: GW:192.168.15.1
I (11885) example: ~~~~~~~~~~~
---- Closed the serial port COM3 ----
